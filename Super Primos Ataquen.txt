
https://www.urionlinejudge.com.br/judge/es/problems/view/2674


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp207
{
    class Program
    {


        // function generate all prime number less then N in O(n) 
        static HashSet<string> Sieve(int N)
        {
            // 0 and 1 are not prime 
            // isprime[0] = isprime[1] = false;

            List<bool> isprime = new List<bool>(N + 1);
            List<int> prime = new List<int>(N + 1);
            List<int> SPF = new List<int>(N + 1);

            isprime.Add(false);
            isprime.Add(false);
            SPF.Add(0);
            SPF.Add(0);

            for (int i = 2; i < N + 1; i++)
            {
                isprime.Add(true);
                SPF.Add(0);
            }

            // Fill rest of the entries 
            for (int i = 2; i < N; i++)
            {
                // If isPrime[i] == True then i is 
                // prime number 
                if (isprime[i])
                {
                    // put i into prime[] vector 
                    prime.Add(i);

                    // A prime number is its own smallest 
                    // prime factor 
                    SPF[i] = i;
                }

                // Remove all multiples of  i*prime[j] which are 
                // not prime by making isPrime[i*prime[j]] = false 
                // and put smallest prime factor of i*Prime[j] as prime[j] 
                // [ for exp :let  i = 5 , j = 0 , prime[j] = 2 [ i*prime[j] = 10 ] 
                // so smallest prime factor of '10' is '2' that is prime[j] ] 
                // this loop run only one time for number which are not prime 
                for (int j = 0;
                     j < (int)prime.Count &&
                     i * prime[j] < N && prime[j] <= SPF[i];
                     j++)
                {
                    isprime[i * prime[j]] = false;

                    // put smallest prime factor of i*prime[j] 
                    SPF[i * prime[j]] = prime[j];
                }
            }

            return new HashSet<string>(Array.ConvertAll(prime.ToArray(), e => e.ToString()));

        }

        static bool TodosLosDigitosPrimos(string numero)
        {
            HashSet<char> hash = new HashSet<char>(new char[] { '2', '3', '5', '7' });

            foreach (char item in numero)
            {
                if (!hash.Contains(item))
                {
                    return false;
                }
            }

            return true;
        }


        static void Main(string[] args)
        {

            HashSet<string> sieve = Sieve(100001);


            string num;
            while ((num = Console.ReadLine()) != null)
            {

                if (sieve.Contains(num))
                {
                    if (TodosLosDigitosPrimos(num))
                    {
                        Console.WriteLine("Super");
                    }
                    else
                    {
                        Console.WriteLine("Primo");
                    }
                }
                else
                {
                    Console.WriteLine("Nada");
                }



            }




            Console.ReadLine();
        }
    }
}
